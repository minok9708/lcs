{"version":3,"sources":["markerdata.js","CafeSearch.js","Components/Search.js","App.js","Map/Map.js","LogIn/LogIn.js","serviceWorker.js","index.js"],"names":["markerdata","id","name","address","lat","lng","CafeSearch","props","state","posts","fetch","then","res","json","data","setState","postsLsit","this","map","key","title","body","onCreate","handleCreate","React","Component","Search","keyword","handleChange","e","target","value","appClick","console","log","handleSubmit","preventDefault","place","style","width","backgroundcolor","padding","action","method","type","placeholder","onChange","onClick","App","className","to","Map","handleToZoomLevelOne","zoom","navermaps","window","naver","maps","input_latlng","currentLat","currentLng","currentLatLng","zoomControl","mapTypeId","zoomControlOptions","position","Position","TOP_RIGHT","ZoomControlStyle","BUTTON","scaleControl","draggable","scrollWheel","bounds","rect","swLatitude","swLongitude","neLatitude","neLongitude","handleBoundsChanged","bind","swLatlng","getSW","neLatlng","getNE","rectTimeout","clearTimeout","setTimeout","_lat","_lng","message","Headers","append","params","URLSearchParams","changeBounds","mapRef","getBounds","navigator","geolocation","alert","getCurrentPosition","coords","latitude","longitude","locPosition","LatLng","loding","panTo","error","code","enableHighAccuracy","maximumAge","timeout","Infinity","naverRef","ref","height","handleClick","onBoundsChanged","defaultCenter","marker","index","animation","icon","url","LogIn","pw","appChange","appKeyPress","Value","onKeyPress","marginBottom","Boolean","location","hostname","match","ReactDOM","render","ncpClientId","StrictMode","exact","path","component","document","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"2TAAaA,G,YAAa,CACxB,CACEC,GAAI,EACJC,KAAM,2BACNC,QAAS,iHACTC,IAAK,YACLC,IAAK,cAEP,CACEJ,GAAI,EACJC,KAAM,qBACNC,QAAS,wEACTC,IAAK,YACLC,IAAK,eAEP,CACEJ,GAAI,EACJC,KAAM,iCACNC,QAAS,2GACTC,IAAK,aACLC,IAAK,eAEP,CACEJ,GAAI,EACJC,KAAM,kCACNC,QAAS,+DACTC,IAAK,aACLC,IAAK,sBAEP,CACEJ,GAAI,EACJC,KAAM,4BACNC,QAAS,8DACTC,IAAK,aACLC,IAAK,wBCgBMC,G,wDA3Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,IAHQ,E,iEAOG,IAAD,OAEnBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OACJ,EAAKC,SAAS,CACZN,MAAOK,S,+BAKL,IAIFE,EAHUC,KAAKT,MAAdC,MAGiBS,KAAI,SAACT,GAAD,OAC1B,yBAAKU,IAAKV,EAAMR,GAAIA,GAAIQ,EAAMR,IAC5B,4BAAKQ,EAAMW,OACX,4BAAKX,EAAMY,UAIf,OACE,6BACE,6BACE,gCACE,kBAAC,EAAD,CAAQC,SAAUL,KAAKM,iBAI3B,6BAAMP,Q,GAtCWQ,IAAMC,YCqEhBC,E,4MApEblB,MAAQ,CACNmB,QAAS,I,EAGXC,aAAe,SAACC,GACd,EAAKd,SAAS,CACZY,QAASE,EAAEC,OAAOC,S,EAItBC,SAAW,WACTC,QAAQC,IAAI,sBAAS,EAAK1B,MAAMmB,U,EAGlCQ,aAAe,SAACN,GAEdA,EAAEO,iBAEF,EAAK7B,MAAMe,SAAS,EAAKd,OAEzB,EAAKO,SAAS,CACZsB,MAAO,M,uDAID,IACDV,EAAWV,KAAKT,MAAhBmB,QACAK,EAAYf,KAAZe,SAOP,OACE,6BACE,6BACE,0BACE/B,GAAG,MACHqC,MAXI,CACVC,MAAO,OACPC,gBAAiB,OACjBC,QAAS,MASHC,OAAO,oCACPC,OAAO,QAGP,2BACEC,KAAK,OACLC,YAAY,0DACZd,MAAOJ,EACPmB,SAAU7B,KAAKW,aACf1B,KAAK,SAEP,2BACED,GAAG,aACH2C,KAAK,SACLb,MAAM,eACNgB,QAASf,MAKf,6BACE,gCAAML,EAAN,2E,GA/DWH,IAAMC,W,QC8CZuB,E,4MA5CbzB,aAAe,SAACT,GACdmB,QAAQC,IAAIpB,I,uDAIZ,OACE,gCACE,yBAAKmC,UAAU,OACb,6BAEE,yDACA,kHAGF,6BACE,kBAAC,IAAD,CAAMC,GAAG,eACP,8BACE,2BAAON,KAAK,WACZ,4BAAQ3C,GAAG,cAAX,mBAKN,6BACE,kBAAC,IAAD,CAAMiD,GAAG,QACP,4BAAQjD,GAAG,YAAY2C,KAAK,UAA5B,kDAMJ,6BACE,kBAAC,IAAD,CAAMM,GAAG,UACP,4BAAQjD,GAAG,QAAQ2C,KAAK,UAAxB,8B,GAlCIpB,IAAMC,W,gBCsRT0B,G,wDAvQb,WAAY5C,GAAQ,IAAD,uBACjB,cAAMA,IA2CR6C,qBAAuB,SAACvB,GACtB,EAAKd,SAAS,CACZsC,KAAM,MA5CR,IAAMC,EAAYC,OAAOC,MAAMC,KAFd,OAIjB,EAAKjD,MAAQ,CACXU,IAAKoC,EACLI,aAAc,GACdC,WAAY,GACZC,WAAY,GACZC,cAAe,GACfC,aAAa,EAEbC,UAAW,SACXC,mBAAoB,CAClBC,SAAUX,EAAUY,SAASC,UAC7B7B,MAAOgB,EAAUc,iBAAiBC,QAEpCC,cAAc,EACdC,WAAW,EACXC,aAAa,EACbC,OAAQ,KACRC,KAAM,KACNC,WAAY,GACZC,YAAa,GACbC,WAAY,GACZC,YAAa,IAGf,EAAKC,oBAAsB,EAAKA,oBAAoBC,KAAzB,gBA5BV,E,iEAyCjB/C,QAAQC,IAAI,wB,mCASDuC,GAAS,IAAD,OACnBxD,KAAKF,SAAS,CAAC0D,WAGf,IAAIQ,EAAWR,EAAOS,QAGlBC,EAAWV,EAAOW,QAGlBnE,KAAKoE,aAAaC,aAAarE,KAAKoE,aACxCpE,KAAKoE,YAAcE,YAAW,WAG5BtD,QAAQC,IAAIuC,EAAOS,SACnBjD,QAAQC,IAAIuC,EAAOW,SAEnB,IAAIT,EAAaM,EAASO,KACtBZ,EAAcK,EAASQ,KACvBZ,EAAaM,EAASK,KACtBV,EAAcK,EAASM,KAE3B,EAAK1E,SAAS,CACZ4D,WAAYM,EAASO,KACrBZ,YAAaK,EAASQ,KACtBZ,WAAYM,EAASK,KACrBV,YAAaK,EAASM,OAGxB,IAAIC,EAAO,8DAAkBf,EAAlB,YAAgCC,EAAhC,yEACGC,EADH,YACiBC,GAC5B7C,QAAQC,IAAIwD,IAOE,IAAIC,SAEVC,OAAO,8BAA+B,KAE9C,IAAIC,EAAS,IAAIC,gBAEjBD,EAAOD,OAAO,aAAc,EAAKpF,MAAMmE,YACvCkB,EAAOD,OAAO,cAAe,EAAKpF,MAAMoE,aACxCiB,EAAOD,OAAO,aAAc,EAAKpF,MAAMqE,YACvCgB,EAAOD,OAAO,cAAe,EAAKpF,MAAMsE,aACxC7C,QAAQC,IACN,EAAK1B,MAAMmE,WACXM,EAASQ,KACTN,EAASK,KACTL,EAASM,QAwBV,O,0CAGehB,GAClBxD,KAAK8E,aAAatB,K,0CAMC,IAAD,OACZnB,EAAYC,OAAOC,MAAMC,KAK/BxC,KAAK8E,aAAa9E,KAAK+E,OAAOC,aAI1BC,UAAUC,aACZC,MAAM,6CAENF,UAAUC,YAAYE,oBACpB,SAACpC,GACChC,QAAQC,IAAI,gBAAiB+B,EAASqC,OAAOC,UAC7CtE,QAAQC,IAAI,iBAAkB+B,EAASqC,OAAOE,WAC9CvE,QAAQC,IAAI+B,GAEZ,IAAI7D,EAAM6D,EAASqC,OAAOC,SACxBlG,EAAM4D,EAASqC,OAAOE,UAEpBC,EAAc,IAAInD,EAAUoD,OAAOtG,EAAKC,GAG5C,EAAKU,SAAS,CACZ4C,WAAYvD,EACZwD,WAAYvD,EACZwD,cAAe4C,EACfE,QAAQ,IAIV,EAAKX,OAAOY,MACV,IAAItD,EAAUoD,OACZzC,EAASqC,OAAOC,SAChBtC,EAASqC,OAAOE,eAKtB,SAACK,GACC5E,QAAQ4E,MAAM,gBAAkBA,EAAMC,KAAO,MAAQD,EAAMnB,WAE7D,CAEEqB,oBAAoB,EACpBC,WAAY,EACZC,QAASC,OAKbd,MAAM,mD,+BAIA,IAAD,SAC0BnF,KAAKT,MAA/BmD,EADA,EACAA,WAAYC,EADZ,EACYA,WAEnB,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,CACEuD,SAAU,SAACC,GACT,EAAKpB,OAASoB,GAEhBnH,GAAG,WACHqC,MAAO,CAACC,MAAO,OAAQ8E,OAAQ,SAC/BtE,QAAS9B,KAAKqG,YACd7C,OAAQxD,KAAKT,MAAMiE,OACnB8C,gBACEtG,KAAK8D,oBAEPyC,cAAe,CACbpH,IAAK,WACLC,IAAK,cAYNY,KAAKT,MAAMkE,KACZ,kBAAC,IAAD,CACEzE,GAAG,MACHgE,SAAU,CACR7D,IAAKuD,EACLtD,IAAKuD,GAEPb,QAAS,WACPqD,MAAM,sBAAD,OACI,EAAK5F,MAAMmD,WADf,cAC+B,EAAKnD,MAAMoD,WAD1C,4BAMR5D,EAAWkB,KAAI,SAACuG,EAAQC,GACvB,OACE,kBAAC,IAAD,CACExH,KAAMuH,EAAOvH,KACbiB,IAAKuG,EACLzD,SAAU,CACR7D,IAAKqH,EAAOrH,IACZC,IAAKoH,EAAOpH,KAEde,MAAOqG,EAAOvH,KACdyH,UAAW,EACXC,KAAM,CACJC,IAAK,qDAEP9E,QAAS,wB,GA5PPvB,IAAMC,Y,QC8ETqG,G,kNA7FbtH,MAAQ,CACNP,GAAI,GACJ8H,GAAI,I,EAINC,UAAY,SAACnG,GAEX,EAAKd,SAAL,eACGc,EAAEC,OAAO5B,KAAO2B,EAAEC,OAAOC,S,EAK9BC,SAAW,WACTC,QAAQC,IAAI,sBAAS,EAAK1B,MAAMP,GAAK,4BAAU,EAAKO,MAAMuH,K,EAI5DE,YAAc,SAACpG,GACC,UAAVA,EAAEV,KACJ,EAAKa,Y,EAITG,aAAe,SAACN,GAEdA,EAAEO,iBAEF,EAAK7B,MAAMe,SAAS,EAAKd,OAEzB,EAAKO,SAAS,CACZd,GAAI,GACJ8H,GAAI,M,uDAIE,IAAD,EACU9G,KAAKT,MAAfP,EADA,EACAA,GAAI8H,EADJ,EACIA,GACN/F,EAAyBf,KAAzBe,SAAUiG,EAAehH,KAAfgH,YAEf,OACE,yBAAKhI,GAAG,WACN,0BACEA,GAAG,QAEH0C,OAAO,QAEP,yBAAK1C,GAAG,MACN,2BACE2C,KAAK,OACL1C,KAAK,KACL2C,YAAY,2DACZd,MAAO9B,EACP6C,SAAU7B,KAAK+G,aAInB,yBAAK/H,GAAG,MACN,2BACE2C,KAAK,WACL1C,KAAK,KACL2C,YAAY,iEACZqF,MAAOH,EACPjF,SAAU7B,KAAK+G,UACfG,WAAYF,KAIhB,yBAAKhI,GAAG,UACN,4BACEA,GAAG,QACkC8C,QAASf,GAFhD,uBAQF,wBAAIM,MAAO,CAAC8F,aAAc,KAAM7F,MAAO,SAEvC,yBAAKtC,GAAG,OACN,2BAAO2C,KAAK,SAAS3C,GAAG,cAAciI,MAAM,oCAE5C,2BAAOtF,KAAK,SAAS3C,GAAG,cAAciI,MAAM,0CAE5C,2BAAOtF,KAAK,SAAS3C,GAAG,YAAYiI,MAAM,oC,GAtFlC1G,IAAMC,YCQN4G,QACW,cAA7B9E,OAAO+E,SAASC,UAEe,UAA7BhF,OAAO+E,SAASC,UAEhBhF,OAAO+E,SAASC,SAASC,MACvB,2D,WCPNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAA4BC,YAAY,cACtC,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW/F,IACjC,kBAAC,IAAD,CAAO8F,KAAK,OAAOC,UAAW5F,IAC9B,kBAAC,IAAD,CAAO2F,KAAK,SAASC,UAAWjB,IAChC,kBAAC,IAAD,CAAOgB,KAAK,cAAcC,UAAWzI,QAM7C0I,SAASC,eAAe,SD0GpB,kBAAmB/C,WACrBA,UAAUgD,cAAcC,MACrBxI,MAAK,SAAAyI,GACJA,EAAaC,gBAEdC,OAAM,SAAAzC,GACL5E,QAAQ4E,MAAMA,EAAMnB,c","file":"static/js/main.a12376cc.chunk.js","sourcesContent":["export const markerdata = [\r\n  {\r\n    id: 1,\r\n    name: \"서울타워\",\r\n    address: \"서울특별시 용산구 용산2가동 남산공원길 105\",\r\n    lat: \"37.554722\",\r\n    lng: \"126.970833\",\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"중랑역\",\r\n    address: \"서울특별시 중랑구 중화2동\",\r\n    lat: \"37.594956\",\r\n    lng: \"127.0739813\",\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"신한대학교\",\r\n    address: \"경기도 동두천시 상패동 벌마들로40번길 30\",\r\n    lat: \"37.9035439\",\r\n    lng: \"127.0358755\",\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"영수오빠 집\",\r\n    address: \"서울시 노원구 상계 6.7동\",\r\n    lat: \"37.6505726\",\r\n    lng: \"127.05075719999999\",\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"민옥이 집\",\r\n    address: \"서울 중랑구 중랑천로 43\",\r\n    lat: \"37.5874336\",\r\n    lng: \"127.07221989999998\",\r\n  },\r\n];\r\n","import React, {Component} from \"react\";\r\nimport \"./CafeSearch.css\";\r\nimport Search from \"./Components/Search.js\";\r\nimport {markerdata} from \"./markerdata.js\";\r\nimport Axios from 'axios';\r\n\r\nclass CafeSearch extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      posts: [],\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    /* 링크 수정해야함 */\r\n    fetch(\"https://jsonplaceholder.typicode.com/posts\")\r\n      .then((res) => res.json())\r\n      .then((data) =>\r\n        this.setState({\r\n          posts: data,\r\n        })\r\n      );\r\n  }\r\n\r\n  render() {\r\n    const {posts} = this.state;\r\n\r\n    /* 검색 결과 리스트 */\r\n    const postsLsit = posts.map((posts) => (\r\n      <div key={posts.id} id={posts.id}>\r\n        <h4>{posts.title}</h4>\r\n        <h4>{posts.body}</h4>\r\n      </div>\r\n    ));\r\n\r\n    return (\r\n      <div>\r\n        <div>\r\n          <center>\r\n            <Search onCreate={this.handleCreate} />\r\n          </center>\r\n        </div>\r\n\r\n        <div>{postsLsit}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CafeSearch;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport {Link} from \"react-router-dom\";\r\nimport CafeSearch from \"../CafeSearch\";\r\n\r\nclass Search extends React.Component {\r\n  /* 메인페이지 검색기능 */\r\n  state = {\r\n    keyword: \"\",\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      keyword: e.target.value,\r\n    });\r\n  };\r\n\r\n  appClick = () => {\r\n    console.log(\"키워드:\" + this.state.keyword);\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    //전송할 때 페이지 리로딩 방지()\r\n    e.preventDefault();\r\n    //상태값을 oncreate를 통하여 부모에게 전달\r\n    this.props.onCreate(this.state);\r\n    //상태 초기화\r\n    this.setState({\r\n      place: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {keyword} = this.state;\r\n    const {appClick} = this;\r\n    const style={\r\n      width: '100%',\r\n      backgroundcolor: 'gray',\r\n      padding: '2%'\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div>\r\n          <form\r\n            id=\"bar\" /* 서버로 keyword 보내기 */\r\n            style={style}\r\n            action=\"http://cafeaddy.xyz:8080/api/name\" \r\n            method=\"post\"\r\n             /* onSubmit={this.handleSubmit} */\r\n          >\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"목적지를 검색하세요\"\r\n              value={keyword}\r\n              onChange={this.handleChange}\r\n              name=\"name\"\r\n            />\r\n            <input\r\n              id=\"searchMain\"\r\n              type=\"submit\"\r\n              value=\"검색\"\r\n              onClick={appClick}\r\n            />\r\n          </form>\r\n        </div>\r\n\r\n        <div>\r\n          <h4>\"{keyword}\"에 대한 검색 결과입니다.</h4>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React from \"react\";\nimport \"./Components/App.css\";\nimport Search from \"./Components/Search.js\";\nimport CafeSearch from \"./CafeSearch.js\";\nimport {Link} from \"react-router-dom\";\n\nclass App extends React.Component {\n  handleCreate = (data) => {\n    console.log(data);\n  };\n\n  render() {\n    return (\n      <center>\n        <div className=\"App\">\n          <div>\n           {/*  <img src={\"https://cdn.icon-icons.com/icons2/591/PNG/512/barista-icons_coffee-shop-sign_icon-icons.com_55423.png\"} className=\"App-logo\" alt=\"logo\" /> */}\n            <h1> 카페어디</h1>\n            <h6>주변카페 자리를 확인해보세요~</h6>\n          </div>\n\n          <div>\n            <Link to=\"/cafesearch\">\n              <form>\n                <input type=\"search\" />\n                <button id=\"searchMain\">검색</button>\n              </form>\n            </Link>\n          </div>\n\n          <div>\n            <Link to=\"/map\">\n              <button id=\"curLocBtn\" type=\"submit\">\n                현재 위치로 검색\n              </button>\n            </Link>\n          </div>\n\n          <div>\n            <Link to=\"/login\">\n              <button id=\"Login\" type=\"submit\">\n                로그인\n              </button>\n            </Link>\n          </div>\n        </div>\n      </center>\n    );\n  }\n}\n\nexport default App;\n","import React, {Fragment} from \"react\";\r\nimport {NaverMap, Marker, Rectangle} from \"react-naver-maps\"; // 패키지 불러오기\r\nimport \"./Map.css\";\r\nimport {markerdata} from \"../markerdata.js\";\r\nimport axios from \"axios\";\r\nimport Search from \"../Components/Search.js\";\r\n/* import infoWindow from \"../infoWindow\"; */\r\n\r\n/* 경계 가시화 (빨간색 사각형)\r\nconst Rect = (props) => (\r\n  <Rectangle\r\n    strokeOpacity={0}\r\n    strokeWeight={0}\r\n    fillOpacity={0.2}\r\n    fillColor={\"#f00\"}\r\n    /*   bounds = {window.naver.maps.getBounds()}/* 지도의 bounds와 동일한 크기의 사각형 그림  \r\n    {...props}\r\n  />\r\n); */\r\n\r\nclass Map extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const navermaps = window.naver.maps;\r\n\r\n    this.state = {\r\n      map: navermaps,\r\n      input_latlng: \"\",\r\n      currentLat: \"\",\r\n      currentLng: \"\",\r\n      currentLatLng: \"\",\r\n      zoomControl: true,\r\n      /*  zoom: 10, */\r\n      mapTypeId: \"normal\",\r\n      zoomControlOptions: {\r\n        position: navermaps.Position.TOP_RIGHT,\r\n        style: navermaps.ZoomControlStyle.BUTTON,\r\n      },\r\n      scaleControl: true,\r\n      draggable: true,\r\n      scrollWheel: true,\r\n      bounds: null,\r\n      rect: null,\r\n      swLatitude: \"\",\r\n      swLongitude: \"\",\r\n      neLatitude: \"\",\r\n      neLongitude: \"\",\r\n    };\r\n\r\n    this.handleBoundsChanged = this.handleBoundsChanged.bind(this);\r\n  }\r\n  /* 클릭햇을때 정보 얻어오는것 */\r\n\r\n  /*   handleClick = (e) => {\r\n    console.log(\"e.coord >>>\", e.coord);\r\n    this.setState({\r\n      input_latlng: e.coord + \"\",\r\n    });\r\n  }; */\r\n\r\n  // 컴포넌트가 DOM 위에 만들어지기 전에 실행됨\r\n  componentWillMount() {\r\n    console.log(\"componentWillMount\");\r\n  }\r\n\r\n  handleToZoomLevelOne = (e) => {\r\n    this.setState({\r\n      zoom: 10,\r\n    });\r\n  };\r\n\r\n  changeBounds(bounds) {\r\n    this.setState({bounds});\r\n\r\n    // 현재 영역정보의 남서쪽 정보를 얻어옴\r\n    let swLatlng = bounds.getSW();\r\n\r\n    // 현재 영역정보의 북동쪽 정보를 얻어옴\r\n    let neLatlng = bounds.getNE();\r\n\r\n    // 요기 if 문안에 통신 코드 작성하게 되면 지정한 초만큼 기다렸다가 통신\r\n    if (this.rectTimeout) clearTimeout(this.rectTimeout);\r\n    this.rectTimeout = setTimeout(() => {\r\n      /* 색깔 */\r\n      //this.setState({ rect: <Rect bounds={this.state.bounds} /> });\r\n      console.log(bounds.getSW());\r\n      console.log(bounds.getNE());\r\n\r\n      let swLatitude = swLatlng._lat;\r\n      let swLongitude = swLatlng._lng;\r\n      let neLatitude = neLatlng._lat;\r\n      let neLongitude = neLatlng._lng;\r\n\r\n      this.setState({\r\n        swLatitude: swLatlng._lat,\r\n        swLongitude: swLatlng._lng,\r\n        neLatitude: neLatlng._lat,\r\n        neLongitude: neLatlng._lng,\r\n      });\r\n\r\n      let message = `남서쪽 위도, 경도는 ${swLatitude},${swLongitude}\\n\r\n      북동쪽 위도, 경도는 ${neLatitude},${neLongitude}`;\r\n      console.log(message);\r\n\r\n      // let data = {xPoint: 127.067628, yPoint: 37.5969417};\r\n      // console.log(data);\r\n\r\n      let mapUrl = \"http://cafeaddy.xyz:8080/api/cafes\";\r\n\r\n      let headers = new Headers();\r\n\r\n      headers.append(\"Access-Control-Allow-Origin\", \"*\");\r\n      // headers.append(\"Content-Type\", \"application/json;\");\r\n      var params = new URLSearchParams();\r\n\r\n      params.append(\"swLatitude\", this.state.swLatitude);\r\n      params.append(\"swLongitude\", this.state.swLongitude);\r\n      params.append(\"neLatitude\", this.state.neLatitude);\r\n      params.append(\"neLongitude\", this.state.neLongitude);\r\n      console.log(\r\n        this.state.swLatitude,\r\n        swLatlng._lng,\r\n        neLatlng._lat,\r\n        neLatlng._lng\r\n      );\r\n\r\n      /* 화면 좌표 서버로 전송 */\r\n      /* axios({\r\n        method: \"post\",\r\n        headers: {\"Content-Type\": `application/json`},\r\n        url: mapUrl,\r\n        data: {\r\n          swLatitude: this.state.swLatitude,\r\n          swLongitude: this.state.swLongitude,\r\n          neLatitude: this.state.neLatitude,\r\n          neLongitude: this.state.neLongitude,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          /* 정상적으로 데이터를 받았을경우 \r\n          console.log(response);\r\n        })\r\n        .catch((error) => {\r\n          /* 에러 catch \r\n          console.log(\"error:\", error.response);\r\n        }); */\r\n\r\n    }, 500);\r\n  }\r\n\r\n  handleBoundsChanged(bounds) {\r\n    this.changeBounds(bounds);\r\n  }\r\n\r\n  // 컴포넌트가 만들어지고 첫 렌더링을 다 마친 후 실행되는 메소드입니다.\r\n  // 이 안에서 다른 JavaScript 프레임워크를 연동하거나,\r\n  // setTimeout, setInterval 및 AJAX 처리 등을 넣습니다\r\n  componentDidMount() {\r\n    const navermaps = window.naver.maps;\r\n\r\n\r\n\r\n    /* 맵 생성시 초기 bounds 알기위해 레퍼런스에 직접 접근하기 위함 */\r\n    this.changeBounds(this.mapRef.getBounds());\r\n    \r\n\r\n    /* GPS 사용 가능 */\r\n    if (navigator.geolocation) {\r\n      alert(\"Geolocation API 사용 가능\");\r\n\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          console.log(\"Latitude is :\", position.coords.latitude);\r\n          console.log(\"Longitude is :\", position.coords.longitude);\r\n          console.log(position);\r\n\r\n          let lat = position.coords.latitude,\r\n            lng = position.coords.longitude;\r\n\r\n          let locPosition = new navermaps.LatLng(lat, lng);\r\n\r\n          /* 현재 위치에 대한 정보를 setState를 통해서 state에 저장 */\r\n          this.setState({\r\n            currentLat: lat,\r\n            currentLng: lng,\r\n            currentLatLng: locPosition,\r\n            loding: false,\r\n          });\r\n\r\n          // 현재위치를 찾은 후 그 위치로 화면 전환\r\n          this.mapRef.panTo(\r\n            new navermaps.LatLng(\r\n              position.coords.latitude,\r\n              position.coords.longitude\r\n            )\r\n          );\r\n        },\r\n\r\n        (error) => {\r\n          console.error(\"Error Code = \" + error.code + \" - \" + error.message);\r\n        },\r\n        {\r\n          //옵션\r\n          enableHighAccuracy: true, //베터리를 소모해서 더 정확한 위치를 찾음\r\n          maximumAge: 0, //한번찾은 위치정보를 해당 초만큼 캐싱\r\n          timeout: Infinity, //주어진 초에 찾지못하면 에러발생\r\n        }\r\n      );\r\n      // 현재 위치 권한 얻어오기 불가할때\r\n    } else {\r\n      alert(\"Geolocation is not supported by this browser.\");\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {currentLat, currentLng} = this.state;\r\n    /* const {infoWindow} = this.state; */\r\n    return (\r\n      <Fragment>\r\n        <NaverMap\r\n          naverRef={(ref) => {\r\n            this.mapRef = ref;\r\n          }}\r\n          id=\"navermap\"\r\n          style={{width: \"100%\", height: \"100vh\"}}\r\n          onClick={this.handleClick} // 맵 클릭했을때 이벤트\r\n          bounds={this.state.bounds}\r\n          onBoundsChanged={\r\n            this.handleBoundsChanged /* 지도가 움직이는걸 느낄 때 */\r\n          }\r\n          defaultCenter={{\r\n            lat: 37.5666805, // 현재위치 Lat\r\n            lng: 126.9784147, // 현재위치 Lng\r\n          }}\r\n        >\r\n          \r\n          {/* <form className=\"mapSearch\">\r\n            <input type=\"search\" />\r\n            <button id=\"searchMain\">검색</button>\r\n          </form>  */}\r\n\r\n          {/* <Search /> */}\r\n\r\n          {/* bound 사각형 생성 */}\r\n          {this.state.rect}\r\n          <Marker\r\n            id=\"map\"\r\n            position={{\r\n              lat: currentLat,\r\n              lng: currentLng,\r\n            }}\r\n            onClick={() => {\r\n              alert(\r\n                `여기는 ${this.state.currentLat} : ${this.state.currentLng} 입니다.`\r\n              );\r\n            }}\r\n          ></Marker>\r\n          {/* 마커 리스트 가지고 동적으로 반복하여 생성  */}\r\n          {markerdata.map((marker, index) => {\r\n            return (\r\n              <Marker\r\n                name={marker.name}\r\n                key={index}\r\n                position={{\r\n                  lat: marker.lat,\r\n                  lng: marker.lng,\r\n                }}\r\n                title={marker.name}\r\n                animation={0}\r\n                icon={{\r\n                  url: \"https://maps.google.com/mapfiles/ms/icons/red.png\",\r\n                }}\r\n                onClick={() => {\r\n                  /* alert(`여기는 ${marker.name}입니다.`); */\r\n                }}\r\n              />\r\n            );\r\n          })}\r\n        </NaverMap>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport {BrowserRouter as Router, Route, Link} from \"react-router-dom\";\r\nimport \"./LogIn.css\";\r\n\r\nclass LogIn extends React.Component {\r\n  state = {\r\n    id: \"\",\r\n    pw: \"\",\r\n  };\r\n\r\n  /* input value 변경 ==> onChange */\r\n  appChange = (e) => {\r\n    /* id 핸들 */\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  /* 로그인 버튼 클릭 ==> onClick */\r\n  appClick = () => {\r\n    console.log(\"아이디:\" + this.state.id + \"비밀번호:\" + this.state.pw);\r\n  };\r\n\r\n  /* 엔터키로 사용했을 때 */\r\n  appKeyPress = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      this.appClick();\r\n    }\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    //페이지 리로딩 방지\r\n    e.preventDefault();\r\n    //상태값을 oncreate를 통하여 부모에게 전달\r\n    this.props.onCreate(this.state);\r\n    //상태 초기화\r\n    this.setState({\r\n      id: \"\",\r\n      pw: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {id, pw} = this.state;\r\n    let {appClick, appKeyPress} = this;\r\n\r\n    return (\r\n      <div id=\"content\">\r\n        <form\r\n          id=\"login\"\r\n         /*  action=\"http://cafeaddy.xyz:8080/api/name\" */\r\n          method=\"POST\"\r\n        >\r\n          <div id=\"id\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"id\"\r\n              placeholder=\"아이디를 입력하세요.\"\r\n              value={id}\r\n              onChange={this.appChange}\r\n            />\r\n          </div>\r\n\r\n          <div id=\"pw\">\r\n            <input\r\n              type=\"password\"\r\n              name=\"pw\"\r\n              placeholder=\"비밀번호를 입력하세요.\"\r\n              Value={pw}\r\n              onChange={this.appChange}\r\n              onKeyPress={appKeyPress}\r\n            />\r\n          </div>\r\n\r\n          <div id=\"middle\">\r\n            <button\r\n              id=\"login\"\r\n              /*  onSubmit={this.handleSubmit}  */ onClick={appClick}\r\n            >\r\n              로그인\r\n            </button>\r\n          </div>\r\n\r\n          <hr style={{marginBottom: \"2%\", width: \"26%\"}} />\r\n\r\n          <div id=\"Btn\">\r\n            <input type=\"submit\" id=\"idSearchBtn\" Value=\"아이디 찾기\" />\r\n\r\n            <input type=\"submit\" id=\"pwSearchBtn\" Value=\"비밀번호 찾기\" />\r\n\r\n            <input type=\"submit\" id=\"signUpBtn\" Value=\"회원가입\" />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LogIn;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Map from \"./Map/Map\";\nimport LogIn from \"./LogIn/LogIn\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {BrowserRouter, Switch, Route} from \"react-router-dom\";\nimport {RenderAfterNavermapsLoaded} from \"react-naver-maps\";\nimport CafeSearch from \"./CafeSearch\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Switch>\n      <RenderAfterNavermapsLoaded ncpClientId=\"p8lftt0b2s\">\n        <React.StrictMode>\n          <Route exact path=\"/\" component={App}></Route>\n          <Route path=\"/map\" component={Map}></Route>\n          <Route path=\"/login\" component={LogIn}></Route>\n          <Route path=\"/cafesearch\" component={CafeSearch}></Route>\n          {/* <Route path=\"/상세페이지\" component={상세페이지}></Route> */}\n        </React.StrictMode>\n      </RenderAfterNavermapsLoaded>\n    </Switch>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}