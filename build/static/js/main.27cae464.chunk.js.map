{"version":3,"sources":["CafeSearch.js","Components/Search.js","App.js","Map/Map.js","LogIn/LogIn.js","serviceWorker.js","index.js"],"names":["CafeSearch","props","state","posts","fetch","then","res","json","data","setState","postsLsit","this","map","key","id","title","body","onCreate","handleCreate","React","Component","Search","keyword","handleChange","e","target","value","appClick","console","log","handleSubmit","preventDefault","place","action","method","type","placeholder","onChange","name","onClick","App","className","to","Rect","strokeOpacity","strokeWeight","fillOpacity","fillColor","Map","handleClick","coord","input_latlng","handleToZoomLevelOne","zoom","navermaps","window","naver","maps","currentLat","currentLng","currentLatLng","zoomControl","mapTypeId","zoomControlOptions","position","Position","TOP_LEFT","style","ZoomControlStyle","SMALL","scaleControl","draggable","scrollWheel","bounds","rect","handleBoundsChanged","bind","rectTimeout","clearTimeout","setTimeout","changeBounds","mapRef","getBounds","navigator","geolocation","alert","getCurrentPosition","coords","latitude","longitude","lat","lng","locPosition","LatLng","LatLngBounds","southWest","getSW","northEast","getNE","error","code","message","enableHighAccuracy","maximumAge","timeout","Infinity","naverRef","ref","width","height","center","onBoundsChanged","LogIn","pw","handleIdChange","handlePwChange","f","Value","onSubmit","marginBottom","Boolean","location","hostname","match","ReactDOM","render","ncpClientId","StrictMode","exact","path","component","document","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.27cae464.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport \"./CafeSearch.css\";\r\nimport Search from \"./Components/Search.js\";\r\nimport {markerdata} from \"./markerdata.js\";\r\n\r\nclass CafeSearch extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      posts: [],\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    /* 링크 수정해야함 */\r\n    fetch(\"https://jsonplaceholder.typicode.com/posts\")\r\n      .then((res) => res.json())\r\n      .then((data) =>\r\n        this.setState({\r\n          posts: data,\r\n        })\r\n      );\r\n  }\r\n\r\n  render() {\r\n    const {posts} = this.state;\r\n\r\n    const postsLsit = posts.map((posts) => (\r\n      <div key={posts.id} id={posts.id}>\r\n        <h4>{posts.title}</h4>\r\n        <h4>{posts.body}</h4>\r\n      </div>\r\n    ));\r\n\r\n    return (\r\n      <div>\r\n        <div>\r\n          <center>\r\n            <Search onCreate={this.handleCreate} />\r\n          </center>\r\n        </div>\r\n\r\n        <div>{postsLsit}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CafeSearch;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport {Link} from \"react-router-dom\";\r\nimport CafeSearch from \"../CafeSearch\";\r\n\r\nclass Search extends React.Component {\r\n  /* 메인페이지 검색기능 */\r\n  state = {\r\n    keyword: \"\",\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      keyword: e.target.value,\r\n    });\r\n  };\r\n\r\n  appClick = () => {\r\n    console.log(\"키워드:\" + this.state.keyword);\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    //전송할 때 페이지 리로딩 방지()\r\n    e.preventDefault();\r\n    //상태값을 oncreate를 통하여 부모에게 전달\r\n    this.props.onCreate(this.state);\r\n    //상태 초기화\r\n    this.setState({\r\n      place: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {keyword} = this.state;\r\n    const {appClick} = this;\r\n\r\n    return (\r\n      <div>\r\n        <div>\r\n          <form\r\n            id=\"bar\" /* 서버로 keyword 보내기 */\r\n            action=\"http://cafeaddy.xyz:8080/api/name\"\r\n            method=\"post\"\r\n            /* onSubmit={this.handleSubmit} */\r\n          >\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"목적지를 검색하세요\"\r\n              value={keyword}\r\n              onChange={this.handleChange}\r\n              name=\"name\"\r\n            />\r\n            <input\r\n              id=\"searchMain\"\r\n              type=\"submit\"\r\n              value=\"검색\"\r\n              onClick={appClick}\r\n            />\r\n          </form>\r\n        </div>\r\n\r\n        <div>\r\n          <h4>\"{keyword}\"에 대한 검색 결과입니다.</h4>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React from \"react\";\nimport \"./Components/App.css\";\nimport Search from \"./Components/Search.js\";\nimport CafeSearch from \"./CafeSearch.js\";\nimport {Link} from \"react-router-dom\";\n\nclass App extends React.Component {\n  handleCreate = (data) => {\n    console.log(data);\n  };\n\n  render() {\n    return (\n      <center>\n        <div className=\"App\">\n          <div>\n           {/*  <img src={\"./coffeLogo.PNG\"} className=\"App-logo\" alt=\"logo\"/> */}\n            <h1> 카페어디</h1>\n            <h6>주변카페 자리를 확인해보세요~</h6>\n          </div>\n\n          <div>\n            <Link to=\"/cafesearch\">\n              <form>\n                <input type=\"search\" />\n                <button id=\"searchMain\">검색</button>\n              </form>\n            </Link>\n          </div>\n\n          <div>\n            <Link to=\"/map\">\n              <button id=\"curLocBtn\" type=\"submit\">\n                현재 위치로 검색\n              </button>\n            </Link>\n          </div>\n\n          <div>\n            <Link to=\"/login\">\n              <button id=\"Login\" type=\"submit\">\n                로그인\n              </button>\n            </Link>\n          </div>\n        </div>\n      </center>\n    );\n  }\n}\n\nexport default App;\n","import React, {Fragment} from \"react\";\r\nimport {NaverMap, Marker, Rectangle} from \"react-naver-maps\"; // 패키지 불러오기\r\nimport \"./Map.css\";\r\nimport {withNavermaps} from \"react-naver-maps/hocs\";\r\nimport {markerdata} from \"../markerdata.js\";\r\n\r\nconst Rect = (props) => (\r\n  <Rectangle\r\n    strokeOpacity={0}\r\n    strokeWeight={0}\r\n    fillOpacity={0.2}\r\n    fillColor={\"#f00\"}\r\n    {...props}\r\n  />\r\n);\r\n\r\nclass Map extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const navermaps = window.naver.maps;\r\n\r\n    this.state = {\r\n      map: navermaps,\r\n      input_latlng: \"\",\r\n      currentLat: \"\",\r\n      currentLng: \"\",\r\n      currentLatLng: \"\",\r\n      zoomControl: true,\r\n      /*  zoom: 10, */\r\n      mapTypeId: \"normal\",\r\n      zoomControlOptions: {\r\n        position: navermaps.Position.TOP_LEFT,\r\n        style: navermaps.ZoomControlStyle.SMALL,\r\n      },\r\n      scaleControl: true,\r\n      draggable: true,\r\n      scrollWheel: true,\r\n      bounds: null /* navermaps.LatLngBounds(), */,\r\n      rect: null,\r\n    };\r\n\r\n    this.handleBoundsChanged = this.handleBoundsChanged.bind(this);\r\n  }\r\n\r\n  handleClick = (e) => {\r\n    console.log(\"e.coord >>>\", e.coord);\r\n    this.setState({\r\n      input_latlng: e.coord + \"\",\r\n    });\r\n  };\r\n\r\n  handleToZoomLevelOne = (e) => {\r\n    this.setState({\r\n      zoom: 10,\r\n    });\r\n  };\r\n\r\n  changeBounds(bounds) {\r\n    this.setState({bounds});\r\n\r\n    if (this.rectTimeout) clearTimeout(this.rectTimeout);\r\n    this.rectTimeout = setTimeout(() => {\r\n      this.setState({rect: <Rect bounds={this.state.bounds} />});\r\n    });\r\n  }\r\n\r\n  handleBoundsChanged(bounds) {\r\n    this.changeBounds(bounds);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const navermaps = window.naver.maps;\r\n\r\n    this.changeBounds(this.mapRef.getBounds());\r\n\r\n    if (navigator.geolocation) {\r\n      alert(\"Geolocation API 사용 가능\");\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          console.log(\"Latitude is :\", position.coords.latitude);\r\n          console.log(\"Longitude is :\", position.coords.longitude);\r\n          console.log(position);\r\n\r\n          let lat = position.coords.latitude,\r\n            lng = position.coords.longitude;\r\n\r\n          let locPosition = new navermaps.LatLng(lat, lng);\r\n\r\n          this.setState({\r\n            currentLat: lat,\r\n            currentLng: lng,\r\n            currentLatLng: locPosition,\r\n          });\r\n\r\n          var bounds = new navermaps.LatLngBounds(),\r\n            southWest = bounds.getSW(),\r\n            northEast = bounds.getNE(),\r\n            lngSpan = northEast.lng() - southWest.lng(),\r\n            latSpan = northEast.lat() - southWest.lat();\r\n\r\n          // map이 생성될 때의 bounds를 알기 위해 method를 이용합니다.\r\n\r\n          console.log(bounds);\r\n        },\r\n        (error) => {\r\n          console.error(\"Error Code = \" + error.code + \" - \" + error.message);\r\n        },\r\n        {\r\n          //옵션\r\n          enableHighAccuracy: true, //베터리를 소모해서 더 정확한 위치를 찾음\r\n          maximumAge: 0, //한번찾은 위치정보를 해당 초만큼 캐싱\r\n          timeout: Infinity, //주어진 초에 찾지못하면 에러발생\r\n        }\r\n      );\r\n    } else {\r\n      alert(\"Geolocation is not supported by this browser.\");\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <NaverMap\r\n          naverRef={(ref) => {\r\n            this.mapRef = ref;\r\n          }}\r\n          id=\"map\"\r\n          style={{width: \"100%\", height: \"100vh\"}}\r\n          onClick={this.handleClick}\r\n          center={{\r\n            lat: this.state.currentLat,\r\n            lng: this.state.currentLng,\r\n          }} // 지도 초기 위치\r\n          bounds={this.state.bounds}\r\n          onBoundsChanged={this.handleBoundsChanged}\r\n        >\r\n          {this.state.rect}\r\n          {/* {console.log(this.state.rect)} */}\r\n\r\n          <Marker\r\n            id=\"map\"\r\n            position={{\r\n              lat: this.state.currentLat,\r\n              lng: this.state.currentLng,\r\n            }}\r\n            onClick={() => {\r\n              alert(\r\n                `여기는 ${this.state.currentLat} : ${this.state.currentLng} 입니다.`\r\n              );\r\n            }}\r\n          ></Marker>\r\n        </NaverMap>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport {BrowserRouter as Router, Route, Link} from \"react-router-dom\";\r\nimport \"./LogIn.css\";\r\n\r\nclass LogIn extends React.Component {\r\n  state = {\r\n    id: \"\",\r\n    pw: \"\",\r\n  };\r\n\r\n  handleIdChange = (e) => {\r\n    /* id 핸들 */\r\n    this.setState({\r\n      id: e.target.value,\r\n    });\r\n  };\r\n\r\n  handlePwChange = (f) => {\r\n    /* 비밀번호 핸들 */\r\n    this.setState({\r\n      pw: f.target.Value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    //페이지 리로딩 방지\r\n    e.preventDefault();\r\n    //상태값을 oncreate를 통하여 부모에게 전달\r\n    this.props.onCreate(this.state);\r\n    //상태 초기화\r\n    this.setState({\r\n      id: \"\",\r\n      pw: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"content\">\r\n        <form>\r\n          <div id=\"id\">\r\n            <input\r\n              type=\"text\"\r\n              id=\"id\"\r\n              placeholder=\"아이디를 입력하세요.\"\r\n              value={this.state.id}\r\n              onChange={this.handleIdChange}\r\n            ></input>\r\n          </div>\r\n          <div>{console.log(this.state.id)}</div>\r\n\r\n          <div id=\"pw\">\r\n            <input\r\n              type=\"password\"\r\n              id=\"pw\"\r\n              placeholder=\"비밀번호를 입력하세요.\"\r\n              Value={this.state.pw}\r\n              onChange={this.handlePwChange}\r\n            />\r\n          </div>\r\n          <div>{console.log(this.state.pw)}</div>\r\n\r\n          <div id=\"middle\">\r\n            <button id=\"login\" onSubmit={this.handleSubmit}>\r\n              로그인\r\n            </button>\r\n          </div>\r\n          {/*console.log(\"아이디:\", this.state.id, \"비밀번호:\", this.state.pw)*/}\r\n          <hr style={{marginBottom: \"2%\", width: \"26%\"}} />\r\n          <div id=\"Btn\">\r\n            <input type=\"submit\" id=\"idSearchBtn\" Value=\"아이디 찾기\" />\r\n\r\n            <input type=\"submit\" id=\"pwSearchBtn\" Value=\"비밀번호 찾기\" />\r\n\r\n              <input type=\"submit\" id=\"signUpBtn\" Value=\"회원가입\" />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LogIn;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Map from \"./Map/Map\";\nimport LogIn from \"./LogIn/LogIn\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {BrowserRouter, Switch, Route} from \"react-router-dom\";\nimport {RenderAfterNavermapsLoaded} from \"react-naver-maps\";\nimport CafeSearch from \"./CafeSearch\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Switch>\n      <RenderAfterNavermapsLoaded ncpClientId=\"p8lftt0b2s\">\n        <React.StrictMode>\n          <Route exact path=\"/\" component={App}></Route>\n          <Route path=\"/map\" component={Map}></Route>\n          <Route path=\"/login\" component={LogIn}></Route>\n          <Route path=\"/cafesearch\" component={CafeSearch}></Route>\n        </React.StrictMode>\n      </RenderAfterNavermapsLoaded>\n    </Switch>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}