{"version":3,"sources":["Components/Search.js","CafeSearch.js","App.js","Map/Map.js","LogIn/LogIn.js","serviceWorker.js","index.js"],"names":["Search","state","place","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","onCreate","onSubmit","this","type","placeholder","onChange","id","React","Component","CafeSearch","handleCreate","CafeList","App","data","console","log","className","to","Map","handleClick","coord","input_latlng","handleToZoomLevelOne","zoom","navermaps","window","naver","maps","map","zoomControl","mapTypeId","center","LatLng","zoomControlOptions","position","Position","TOP_LEFT","style","ZoomControlStyle","SMALL","scaleControl","draggable","scrollWheel","navigator","geolocation","getCurrentPosition","alert","coords","latitude","longitude","error","enableHighAccuracy","maximumAge","timeout","Infinity","mapDivId","width","height","defaultCenter","lat","lng","defaultZoom","key","Marker","animation","onClick","NaverMapAPI","defaultProps","LogIn","pw","handleIdChange","handlePwChange","f","Value","marginBottom","Boolean","location","hostname","match","ReactDOM","render","ncpClientId","StrictMode","exact","path","component","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2cb2a107.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass Search extends React.Component {\r\n  /* 메인페이지 검색기능 */\r\n  state = {\r\n    place: \"\",\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      place: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    //페이지 리로딩 방지\r\n    e.preventDefault();\r\n    //상태값을 oncreate를 통하여 부모에게 전달\r\n    this.props.onCreate(this.state);\r\n    //상태 초기화\r\n    this.setState({\r\n      place: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input\r\n          type=\"search\"\r\n          placeholder=\"목적지를 검색하세요\"\r\n          value={this.state.place}\r\n          onChange={\r\n            this.handleChange\r\n          } /* 택스트 값이 바뀔때마다 발생하는이벤트 */\r\n        ></input>\r\n        <button id=\"searchMain\" type=\"submit\">\r\n          검색\r\n        </button>\r\n        {/*<div>{this.state.place}</div> */}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React, {Component} from \"react\";\r\nimport \"./CafeSearch.css\";\r\nimport Search from \"./Components/Search.js\";\r\n\r\nclass CafeSearch extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div id=\"bar\">\r\n          <center>\r\n            <Search onCreate={this.handleCreate} />\r\n          </center>\r\n        </div>\r\n\r\n        <div>\r\n          <CafeList />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass CafeList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>\"{}에 대한 검색 결과입니다.\"</h4>\r\n        <table>\r\n          \r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CafeSearch;\r\n","import React from \"react\";\nimport \"./Components/App.css\";\nimport Search from \"./Components/Search.js\";\nimport CafeSearch from \"./CafeSearch.js\";\nimport {Link} from \"react-router-dom\";\n\nclass App extends React.Component {\n  handleCreate = (data) => {\n    console.log(data);\n  };\n\n  render() {\n    return (\n      <center>\n        <div className=\"App\">\n          <div>\n            <h1> 카페어디</h1>\n            <h6>주변카페 자리를 확인해보세요~</h6>\n          </div>\n\n          <div>\n            <Link to=\"/CafeSearch\">\n              <Search onCreate={this.handleCreate} />\n            </Link>\n          </div>\n\n          <div>\n            <Link to=\"/Map\">\n              <button id=\"curLocBtn\" type=\"submit\">\n                현재 위치로 검색\n              </button>\n            </Link>\n          </div>\n\n          <div>\n            <Link to=\"/login\">\n              <button id=\"Login\" type=\"submit\">\n                로그인\n              </button>\n            </Link>\n          </div>\n        </div>\n      </center>\n    );\n  }\n}\n\nexport default App;\n","import React, {Component, Fragment} from \"react\";\r\nimport {NaverMap, Marker, RenderAfterNavermapsLoaded} from \"react-naver-maps\"; // 패키지 불러오기\r\nimport Search from \"../Components/Search\";\r\nimport \"./Map.css\";\r\nimport {findAllByPlaceholderText, render} from \"@testing-library/react\";\r\n\r\nclass Map extends React.Component {\r\n  // map = new naver.maps.Map('mapDiv', {option});\r\n  constructor(props) {\r\n    super(props);\r\n    const navermaps = window.naver.maps;\r\n\r\n    this.state = {\r\n      map: navermaps,\r\n      input_latlng: \"\",\r\n      zoomControl: true,\r\n      zoom: 2,\r\n      mapTypeId: \"normal\",\r\n      center: navermaps.LatLng(36.480058, 127.289039), // 126.9861108, 37.4983439 초기 지도 위치\r\n\r\n      zoomControlOptions: {\r\n        center: new navermaps.LatLng(36.480058, 127.289039), //36.4203004, 128.317960\r\n        position: navermaps.Position.TOP_LEFT,\r\n        style: navermaps.ZoomControlStyle.SMALL,\r\n      },\r\n\r\n      scaleControl: true,\r\n      draggable: true,\r\n      scrollWheel: true,\r\n      scaleControl: false,\r\n      logoControl: false,\r\n      mapDataControl: false,\r\n      zoomControl: true,\r\n      minZoom: 6,\r\n    };\r\n  }\r\n  handleClick = (e) => {\r\n    console.log(\"e.coord >>>\", e.coord);\r\n    this.setState({\r\n      input_latlng: e.coord + \"\",\r\n    });\r\n  };\r\n\r\n  handleToZoomLevelOne = (e) => {\r\n    this.setState({\r\n      zoom: 10,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        {place()}\r\n        {getLocation()}\r\n        {NaverMapAPI()}\r\n        <view>\r\n          <div>{<Search onCreate={this.handleCreate} />}</div>\r\n        </view>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nfunction place(props) {\r\n  return console.log(\"안녕\");\r\n}\r\n\r\nplace.defaultProps = {\r\n  place: \"목적지 없음\",\r\n};\r\n\r\nfunction NaverMapAPI() {\r\n  const navermaps = window.naver.maps;\r\n  return (\r\n    <NaverMap\r\n      mapDivId={\"maps-getting-started-uncontrolled\"} // default: react-naver-map\r\n      style={{\r\n        width: \"100%\", // 네이버지도 가로 길이\r\n        height: \"922px\", // 네이버지도 세로 길이\r\n      }}\r\n      defaultCenter={{lat: 37.9036062, lng: 127.0385797}} // 지도 초기 위치\r\n      defaultZoom={13} // 지도 초기 확대 배율\r\n    >\r\n      <Marker\r\n        id=\"marker1\"\r\n        key={Marker.id}\r\n        position={new navermaps.LatLng(37.554722, 126.970833)}\r\n        animation={2} /* 마커 애니메이션설정 */\r\n        onClick={() => {\r\n          alert(\"여기는 N서울타워입니다.\");\r\n        }}\r\n      ></Marker>\r\n      <Marker\r\n        id=\"marker2\"\r\n        key={Marker.id}\r\n        position={new navermaps.LatLng(37.5939431, 127.075976)}\r\n        animation={0} /* 마커 애니메이션설정 (0.1.2)*/\r\n        onClick={() => {\r\n          alert(\"여기는 중랑역입니다.\");\r\n        }}\r\n      ></Marker>\r\n      <Marker\r\n        id=\"marker3\"\r\n        key={Marker.id}\r\n        position={new navermaps.LatLng(37.9036062, 127.0385797)}\r\n        animation={0} /* 마커 애니메이션설정 (0.1.2)*/\r\n        onClick={() => {\r\n          alert(\"신한대학교입니다.\");\r\n        }}\r\n      ></Marker>\r\n      <Marker\r\n        id=\"marker4\"\r\n        key={Marker.id}\r\n        position={new navermaps.LatLng(37.6505726, 127.05075719999999)}\r\n        animation={0} /* 마커 애니메이션설정 (0.1.2)*/\r\n        onClick={() => {\r\n          alert(\"영수오빠네입니다\");\r\n        }}\r\n      ></Marker>\r\n    </NaverMap>\r\n  );\r\n}\r\n\r\n/* gPS권한 허용/차단 \r\ngetCurrentPosition:현재위치 정보 가져옴\r\nlatitude:위도\r\nlongitude:경도 \r\n*/\r\nfunction getLocation() {\r\n  if (navigator.geolocation) {\r\n    // GPS를 지원하는 경우\r\n    navigator.geolocation.getCurrentPosition(\r\n      function (position) {\r\n        alert(position.coords.latitude + \" \" + position.coords.longitude);\r\n        console.log(\r\n          \"위도: \" +\r\n            position.coords.latitude +\r\n            \" \" +\r\n            \"경도: \" +\r\n            position.coords.longitude\r\n        ); /* 알림으로 나타냄 */\r\n      },\r\n      function (error) {\r\n        //위치값 찾기 에러났을때\r\n        console.error(error);\r\n      },\r\n      {\r\n        //옵션\r\n        enableHighAccuracy: true, //베터리를 소모해서 더 정확한 위치를 찾음\r\n        maximumAge: 0, //한번찾은 위치정보를 해당 초만큼 캐싱\r\n        timeout: Infinity, //주어진 초에 찾지못하면 에러발생\r\n      }\r\n    );\r\n  } else {\r\n    //GPS를 지원하지 않는 경우\r\n    alert(\"GPS를 지원하지 않습니다\");\r\n  }\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport {BrowserRouter as Router, Route, Link} from \"react-router-dom\";\r\nimport \"./LogIn.css\";\r\n\r\nclass LogIn extends React.Component {\r\n  state = {\r\n    id: \"\",\r\n    pw: \"\",\r\n  };\r\n\r\n  handleIdChange = (e) => {\r\n    /* id 핸들 */\r\n    this.setState({\r\n      id: e.target.value,\r\n    });\r\n  };\r\n\r\n  handlePwChange = (f) => {\r\n    /* 비밀번호 핸들 */\r\n    this.setState({\r\n      pw: f.target.Value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    //페이지 리로딩 방지\r\n    e.preventDefault();\r\n    //상태값을 oncreate를 통하여 부모에게 전달\r\n    this.props.onCreate(this.state);\r\n    //상태 초기화\r\n    this.setState({\r\n      id: \"\",\r\n      pw: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"content\">\r\n        <form>\r\n          <div id=\"id\">\r\n            <input\r\n              type=\"text\"\r\n              id=\"id\"\r\n              placeholder=\"아이디를 입력하세요.\"\r\n              value={this.state.id}\r\n              onChange={this.handleIdChange}\r\n            ></input>\r\n          </div>\r\n          <div>{console.log(this.state.id)}</div>\r\n\r\n          <div id=\"pw\">\r\n            <input\r\n              type=\"password\"\r\n              id=\"pw\"\r\n              placeholder=\"비밀번호를 입력하세요.\"\r\n              Value={this.state.pw}\r\n              onChange={this.handlePwChange}\r\n            />\r\n          </div>\r\n          <div>{console.log(this.state.pw)}</div>\r\n\r\n          <div id=\"middle\">\r\n            <button id=\"login\" onSubmit={this.handleSubmit}>\r\n              로그인\r\n            </button>\r\n          </div>\r\n          {/*console.log(\"아이디:\", this.state.id, \"비밀번호:\", this.state.pw)*/}\r\n          <hr style={{marginBottom: \"2%\", width: \"26%\"}} />\r\n          <div id=\"Btn\">\r\n            <input type=\"submit\" id=\"idSearchBtn\" Value=\"아이디 찾기\" />\r\n\r\n            <input type=\"submit\" id=\"pwSearchBtn\" Value=\"비밀번호 찾기\" />\r\n\r\n              <input type=\"submit\" id=\"signUpBtn\" Value=\"회원가입\" />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LogIn;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Map from \"./Map/Map\";\nimport LogIn from \"./LogIn/LogIn\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {BrowserRouter, Switch, Route} from \"react-router-dom\";\nimport {RenderAfterNavermapsLoaded} from \"react-naver-maps\";\nimport CafeSearch from \"./CafeSearch\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Switch>\n      <RenderAfterNavermapsLoaded ncpClientId=\"p8lftt0b2s\">\n        <React.StrictMode>\n          <Route exact path=\"/\" component={App}></Route>\n          <Route path=\"/map\" component={Map}></Route>\n          <Route path=\"/login\" component={LogIn}></Route>\n          <Route path=\"/CafeSearch\" component={CafeSearch}></Route>\n        </React.StrictMode>\n      </RenderAfterNavermapsLoaded>\n    </Switch>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}