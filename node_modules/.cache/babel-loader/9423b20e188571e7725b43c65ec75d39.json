{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\minok\\\\lcs\\\\src\\\\Map.js\";\nimport React, { Component, Fragment } from \"react\";\nimport { RenderAfterNavermapsLoaded, NaverMap, Marker } from \"react-naver-maps\"; // 패키지 불러오기\n\nimport Search from \"./Components/Search\";\nimport \"./Map.css\";\n\nclass Map extends React.Component {\n  // map = new naver.maps.Map('mapDiv', {option});\n  constructor(props) {\n    super(props);\n\n    this.handleClick = e => {\n      console.log(\"e.coord >>>\", e.coord);\n      this.setState({\n        input_latlng: e.coord + \"\"\n      });\n    };\n\n    this.handleToZoomLevelOne = e => {\n      this.setState({\n        zoom: 10\n      });\n    };\n\n    this.handleCreate = data => {\n      console.log(data);\n    };\n\n    const navermaps = window.naver.maps;\n    this.state = {\n      map: navermaps,\n      input_latlng: \"\",\n      zoomControl: true,\n      zoom: 2,\n      mapTypeId: \"normal\",\n      center: navermaps.LatLng(36.480058, 127.289039),\n      // 126.9861108, 37.4983439\n      zoomControlOptions: {\n        center: new navermaps.LatLng(36.480058, 127.289039),\n        //36.4203004, 128.317960\n        position: navermaps.Position.TOP_LEFT,\n        style: navermaps.ZoomControlStyle.SMALL\n      },\n      scaleControl: true,\n      draggable: true,\n      scrollWheel: true\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(RenderAfterNavermapsLoaded, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, NaverMapAPI(), getLocation(), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Search, {\n      onCreate: this.handleCreate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 14\n      }\n    }))));\n  }\n\n}\n\nfunction NaverMapAPI() {\n  const navermaps = window.naver.maps;\n  return /*#__PURE__*/React.createElement(NaverMap, {\n    mapDivId: \"maps-getting-started-uncontrolled\" // default: react-naver-map\n    ,\n    style: {\n      width: \"100%\",\n      // 네이버지도 가로 길이\n      height: \"922px\" // 네이버지도 세로 길이\n\n    },\n    defaultCenter: {\n      lat: 37.554722,\n      lng: 126.970833\n    } // 지도 초기 위치\n    ,\n    defaultZoom: 13 // 지도 초기 확대 배율\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Marker, {\n    key: 1,\n    position: new navermaps.LatLng(37.554722, 126.970833),\n    animation: 1\n    /* 마커 애니메이션설정 */\n    ,\n    onClick: () => {\n      alert(\"여기는 N서울타워입니다.\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }));\n}\n/* gPS권한 허용/차단 \r\ngetCurrentPosition:현재위치 정보 가져옴\r\nlatitude:위도\r\nlongitude:경도 \r\n*/\n\n\nfunction getLocation() {\n  if (navigator.geolocation) {\n    // GPS를 지원하는 경우\n    navigator.geolocation.getCurrentPosition(function (position) {\n      alert(position.coords.latitude + \" \" + position.coords.longitude);\n    }, function (error) {\n      //위치값 찾기 에러났을때\n      console.error(error);\n    }, {\n      //옵션\n      enableHighAccuracy: false,\n      //베터리를 소모해서 더 정확한 위치를 찾음\n      maximumAge: 0,\n      //한번찾은 위치정보를 해당 초만큼 캐싱\n      timeout: Infinity //주어진 초에 찾지못하면 에러발생\n\n    });\n  } else {\n    //GPS를 지원하지 않는 경우\n    alert(\"GPS를 지원하지 않습니다\");\n  }\n}\n\nexport default Map;","map":{"version":3,"sources":["C:/Users/minok/lcs/src/Map.js"],"names":["React","Component","Fragment","RenderAfterNavermapsLoaded","NaverMap","Marker","Search","Map","constructor","props","handleClick","e","console","log","coord","setState","input_latlng","handleToZoomLevelOne","zoom","handleCreate","data","navermaps","window","naver","maps","state","map","zoomControl","mapTypeId","center","LatLng","zoomControlOptions","position","Position","TOP_LEFT","style","ZoomControlStyle","SMALL","scaleControl","draggable","scrollWheel","render","NaverMapAPI","getLocation","width","height","lat","lng","alert","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","error","enableHighAccuracy","maximumAge","timeout","Infinity"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from \"react\";\r\nimport {RenderAfterNavermapsLoaded, NaverMap, Marker} from \"react-naver-maps\"; // 패키지 불러오기\r\nimport Search from \"./Components/Search\";\r\nimport \"./Map.css\";\r\n\r\nclass Map extends React.Component {\r\n  // map = new naver.maps.Map('mapDiv', {option});\r\n  constructor(props) {\r\n    super(props);\r\n    const navermaps = window.naver.maps;\r\n\r\n    this.state = {\r\n      map: navermaps,\r\n      input_latlng: \"\",\r\n      zoomControl: true,\r\n      zoom: 2,\r\n      mapTypeId: \"normal\",\r\n      center: navermaps.LatLng(36.480058, 127.289039), // 126.9861108, 37.4983439\r\n\r\n      zoomControlOptions: {\r\n        center: new navermaps.LatLng(36.480058, 127.289039), //36.4203004, 128.317960\r\n        position: navermaps.Position.TOP_LEFT,\r\n        style: navermaps.ZoomControlStyle.SMALL,\r\n      },\r\n\r\n      scaleControl: true,\r\n      draggable: true,\r\n      scrollWheel: true,\r\n    };\r\n  }\r\n  handleClick = (e) => {\r\n    console.log(\"e.coord >>>\", e.coord);\r\n    this.setState({\r\n      input_latlng: e.coord + \"\",\r\n    });\r\n  };\r\n\r\n  handleToZoomLevelOne = (e) => {\r\n    this.setState({\r\n      zoom: 10,\r\n    });\r\n  };\r\n  handleCreate = (data) => {\r\n    console.log(data);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <RenderAfterNavermapsLoaded>\r\n          {NaverMapAPI()}\r\n          {getLocation()}\r\n          <div>\r\n            {<Search onCreate={this.handleCreate} />}\r\n            </div>\r\n        </RenderAfterNavermapsLoaded>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nfunction NaverMapAPI() {\r\n  const navermaps = window.naver.maps;\r\n\r\n  return (\r\n    <NaverMap\r\n      mapDivId={\"maps-getting-started-uncontrolled\"} // default: react-naver-map\r\n      style={{\r\n        width: \"100%\", // 네이버지도 가로 길이\r\n        height: \"922px\", // 네이버지도 세로 길이\r\n      }}\r\n      defaultCenter={{lat: 37.554722, lng: 126.970833}} // 지도 초기 위치\r\n      defaultZoom={13} // 지도 초기 확대 배율\r\n    >\r\n      <Marker\r\n        key={1}\r\n        position={new navermaps.LatLng(37.554722, 126.970833)}\r\n        animation={1} /* 마커 애니메이션설정 */\r\n        onClick={() => {\r\n          alert(\"여기는 N서울타워입니다.\");\r\n        }}\r\n      ></Marker>\r\n    </NaverMap>\r\n  );\r\n}\r\n\r\n/* gPS권한 허용/차단 \r\ngetCurrentPosition:현재위치 정보 가져옴\r\nlatitude:위도\r\nlongitude:경도 \r\n*/\r\nfunction getLocation() {\r\n  if (navigator.geolocation) {\r\n    // GPS를 지원하는 경우\r\n    navigator.geolocation.getCurrentPosition(\r\n      function (position) {\r\n        alert(position.coords.latitude + \" \" + position.coords.longitude);\r\n      },\r\n      function (error) {\r\n        //위치값 찾기 에러났을때\r\n        console.error(error);\r\n      },\r\n      {\r\n        //옵션\r\n        enableHighAccuracy: false, //베터리를 소모해서 더 정확한 위치를 찾음\r\n        maximumAge: 0, //한번찾은 위치정보를 해당 초만큼 캐싱\r\n        timeout: Infinity, //주어진 초에 찾지못하면 에러발생\r\n      }\r\n    );\r\n  } else {\r\n    //GPS를 지원하지 않는 경우\r\n    alert(\"GPS를 지원하지 않습니다\");\r\n  }\r\n}\r\n\r\nexport default Map;\r\n"]},"metadata":{},"sourceType":"module"}